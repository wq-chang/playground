name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  GO_VERSION: "1.25"
  NODE_VERSION: "24"
  GOLANGCI_LINT_VERSION: "v2.5.0"
  GOTESTSUM_VERSION: "1.13.0"
  GO_MOD_DIR: "go-services"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      go_modules: ${{ steps.detect.outputs.go_modules }}
      react_modules: ${{ steps.detect.outputs.react_modules }}
      has_go_changes: ${{ steps.detect.outputs.has_go_changes }}
      has_react_changes: ${{ steps.detect.outputs.has_react_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 10

      - name: Detect changed modules
        id: detect
        run: |
          # Determine base commit based on event type
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, compare against the base branch
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            CURRENT_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # For pushes, compare against the previous state
            BASE_SHA="${{ github.event.before }}"
            CURRENT_SHA="${{ github.sha }}"

            # Handle new branch (github.event.before is all zeros)
            if [ "$BASE_SHA" == "0000000000000000000000000000000000000000" ]; then
              echo "New branch detected, comparing against default branch"
              git fetch origin ${{ github.event.repository.default_branch }}
              BASE_SHA="origin/${{ github.event.repository.default_branch }}"
            fi
          fi

          echo "Comparing $BASE_SHA...$CURRENT_SHA"

          # Get all changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $CURRENT_SHA)

          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo ""

          # Check if library, go.mod, or go.sum changed
          LIBRARY_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE "^${GO_MOD_DIR}/(library/|go\.mod$|go\.sum$)"; then
            echo "⚠️ Go library changed - will test all Go modules"
            LIBRARY_CHANGED=true
          fi

          # Detect Go modules (go-services/subdirectory)
          CHANGED_GO_MODULES=""

          if [ "$LIBRARY_CHANGED" = true ]; then
            # If library changed, include all modules
            for dir in ${GO_MOD_DIR}/*/; do
              CHANGED_GO_MODULES="$CHANGED_GO_MODULES ./${dir%/}"
            done
          else
            # Only include directly changed modules
            for dir in ${GO_MOD_DIR}/*/; do
              if echo "$CHANGED_FILES" | grep -q "^${dir}"; then
                CHANGED_GO_MODULES="$CHANGED_GO_MODULES ./${dir%/}"
              fi
            done
          fi

          # Detect changed React modules
          CHANGED_REACT_MODULES=""
          for dir in */; do
            if [ -f "${dir}package.json" ]; then
              # Check if any file in this directory changed
              if echo "$CHANGED_FILES" | grep -q "^${dir}"; then
                CHANGED_REACT_MODULES="$CHANGED_REACT_MODULES ./${dir%/}"
              fi
            fi
          done

          # Export outputs
          if [ -z "$CHANGED_GO_MODULES" ]; then
            echo "No Go modules changed"
            echo "go_modules=" >> $GITHUB_OUTPUT
            echo "has_go_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed Go modules: $CHANGED_GO_MODULES"
            echo "go_modules=$CHANGED_GO_MODULES" >> $GITHUB_OUTPUT
            echo "has_go_changes=true" >> $GITHUB_OUTPUT
          fi

          if [ -z "$CHANGED_REACT_MODULES" ]; then
            echo "No React modules changed"
            echo "react_modules=" >> $GITHUB_OUTPUT
            echo "has_react_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed React modules: $CHANGED_REACT_MODULES"
            echo "react_modules=$CHANGED_REACT_MODULES" >> $GITHUB_OUTPUT
            echo "has_react_changes=true" >> $GITHUB_OUTPUT
          fi

  test-go-modules:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_go_changes == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false # Disable cache for monorepo structure

      - name: Run build on changed Go modules
        run: |
          MODULES="${{ needs.detect-changes.outputs.go_modules }}"
          EXIT_CODE=0

          echo "Downloading dependencies"
          (cd ${GO_MOD_DIR} && go mod download)

          for module in $MODULES; do
            echo "Building Go module: $module"
            cd $module

            # Build the module
            if go build -v ./...; then
              echo "✅ Build passed for $module"
            else
              echo "❌ Build failed for $module"
              EXIT_CODE=1
            fi

            cd $GITHUB_WORKSPACE
          done

          exit $EXIT_CODE

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint on changed Go modules
        run: |
          MODULES="${{ needs.detect-changes.outputs.go_modules }}"
          EXIT_CODE=0

          for module in $MODULES; do
            echo "Linting Go module: $module"
            cd $module
            
            # Run golangci-lint if config exists, otherwise use defaults
            if golangci-lint run --timeout=5m ./...; then
              echo "✅ Linting passed for $module"
            else
              echo "❌ Linting failed for $module"
              EXIT_CODE=1
            fi
            
            cd $GITHUB_WORKSPACE
          done

          exit $EXIT_CODE

      - name: Install gotestsum
        run: |
          curl -sSfL https://github.com/gotestyourself/gotestsum/releases/download/v${{ env.GOTESTSUM_VERSION }}/gotestsum_${{ env.GOTESTSUM_VERSION }}_linux_amd64.tar.gz | tar -xz -C /tmp
          sudo mv /tmp/gotestsum /usr/local/bin/gotestsum
          chmod +x /usr/local/bin/gotestsum

      - name: Run tests on changed Go modules
        run: |
          MODULES="${{ needs.detect-changes.outputs.go_modules }}"
          EXIT_CODE=0

          for module in $MODULES; do
            (
              echo "Testing Go module: $module"
              cd $module

              # Run tests with gotestsum
              if gotestsum --format testname -- -v ./...; then
                echo "✅ Tests passed for $module"
              else
                echo "❌ Tests failed for $module"
                EXIT_CODE=1
              fi

              cd $GITHUB_WORKSPACE
            )
          done

          exit $EXIT_CODE

  test-react-modules:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_react_changes == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run tests on changed React modules
        run: |
          MODULES="${{ needs.detect-changes.outputs.react_modules }}"
          EXIT_CODE=0

          for module in $MODULES; do
            echo "Testing React module: $module"
            cd $module

            # Install dependencies
            npm ci

            # Run tests
            if npm test -- run --passWithNoTests; then
              echo "✅ Tests passed for $module"
            else
              echo "❌ Tests failed for $module"
              EXIT_CODE=1
            fi

            cd $GITHUB_WORKSPACE
          done

          exit $EXIT_CODE

  post:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-go-modules, test-react-modules]
    if: always()
    steps:
      - name: Generate summary
        run: |
          if [ "${{ needs.detect-changes.outputs.has_go_changes }}" == "true" ]; then
            echo "### Go Modules Tested" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.detect-changes.outputs.go_modules }}" | tr ' ' '\n' | grep -v '^$' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.test-go-modules.result }}" == "success" ]; then
              echo "✅ All Go lint, build, and tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Some Go lint, build, and tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Go Modules" >> $GITHUB_STEP_SUMMARY
            echo "- No Go modules changed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.has_react_changes }}" == "true" ]; then
            echo "### React Modules Tested" >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.detect-changes.outputs.react_modules }}" | tr ' ' '\n' | grep -v '^$' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.test-react-modules.result }}" == "success" ]; then
              echo "✅ All React tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Some React tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### React Modules" >> $GITHUB_STEP_SUMMARY
            echo "- No React modules changed" >> $GITHUB_STEP_SUMMARY
          fi
